class AP.MainView extends AP.BaseView
  events:
    "click .x-random": 'openRandom'
    "click .x-share": 'share'
    "click .x-like": 'like'

  initialize: (@identifier) ->
    super

  mount: ->
    @animator = new AP.MainAnimator(this)

  unmount: ->
    @animator.unmount()

  render: ->
    super

    if typeof @identifier is 'string' and @identifier.match(/^\d+$/)
      Model.get Number(@identifier), (poem) =>
        @identifier = poem.date()
        @renderDateWithSiblings poem.date()
    else
      @renderDateWithSiblings XDate.from(@identifier) ? Model.date

  renderDateWithSiblings: (date, next) ->
    Model.setDate date
    count = 0
    done = -> ++count == 3 and next?()
    @renderDate date,        (html) => $('x-swiper-slide.current').html html; done()
    @renderDate date.prev(), (html) => $('x-swiper-slide.prev').html html; done()
    @renderDate date.next(), (html) => $('x-swiper-slide.next').html html; done()

  renderDate: (date, next) ->
    console.xdebug "will render poem for #{date}"

    Model.getForDate date, (poem) =>
      console.xdebug "rendering poem for #{date}"

      if not poem and date.gt(Model.date.first()) and date.lt(Model.date.last())
        return next @renderTemplate 'no-data', appDate: date.formattedString()

      if not poem
        return next null

      if date.eq Model.date.last().next()
        return next @renderTemplate 'tomorrow', appDate: date.formattedString()

      if date.gt Model.date.last().next()
        return next null

      context = _.extend {}, poem, domId: "poem-#{poem.id}", appDate: date.formattedString(), liked: poem.isLiked()
      next @renderTemplate 'poem', context

  updateLeftButton: (slided) ->
    return if slided is @slided
    @slided = slided

    button = @$el.find(".left button.link")
    button.removeClass('back open-panel').find('i').removeClass('icon-back icon-menu')
    if @slided
      button.addClass('back').find('i').addClass('icon-back')
    else
      button.addClass('open-panel').find('i').addClass('icon-menu')


  openRandom: (e) =>
    e.preventDefault()
    app.router.open "poems", Model.randomPoemId()

  share: (e) =>
    e.preventDefault()
    Model.getCurrent (poem) =>
      app.sharingManager.setPopupPosition $(".x-share")[0]
      app.sharingManager.share text: poem.content, heading: poem.heading(), url: poem.getUrl()

  like: (e) =>
    e.preventDefault()
    target = $(e.target).closest(".x-like")
    icon = $(target).find('i')

    Util.toggleButton(target)
    action = if icon.hasClass('filled') then 'remove' else 'add'
    icon["#{action}Class"]("gray")

    Model.getCurrent (poem) =>
      poem.like()
