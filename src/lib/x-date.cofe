class window.XDate
  constructor: (value) ->
    @value = switch value?.constructor
      when XDate, MutableXDate then value.value
      when Date then value
      when Number then new Date(value)
      when String then new Date(value)
      when undefined then new Date

  next: ->
    new @constructor Util.nextDate(@value)

  prev: ->
    new @constructor Util.prevDate(@value)

  plus: (days) ->
    new @constructor @value.getTime() + days * 86400 * 1000

  lte: (other) ->
    @string() <= other.string()

  gt: (other) ->
    @string() > other.string()

  eq: (other) ->
    @string() == other.string()

  string: ->
    Util.dateString @value

  toString: ->
    @string()

  getDate: ->
    @value

  formattedString: ->
    Util.formatMonthAndDay @value

  @today = ->
    new this

  @from = (identifier) ->
    switch
      when identifier instanceof XDate then identifier
      when typeof identifier is 'string' and identifier.match(/\d{4}-\d{2}-\d{2}/) then new @(identifier)
      else null

  @fromYMD = (year, month, day) ->
    new this new Date(year, month, day)
