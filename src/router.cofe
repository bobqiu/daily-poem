class AP.Router extends Backbone.Router
  routes:
    "*path": 'glob'

  open: (path...) ->
    @navigate path.join("/"), trigger: true

  update: (path...) ->
    @navigate path.join("/")

  glob: (path) ->
    @path = path

    [action, id, other...] = (path ? '').split('/')
    action ||= 'main'

    if this[action]
      console.debug "open #{action}(#{id ? ''})"
      this[action](id, other...)
    else
      console.warn "no route for #{path}"
      @navigate '', trigger: true

  main:          -> @openView 'Main', Model.date
  today:         -> @openView 'Main', Model.date
  tomorrow:      -> @openView 'Main', Model.date.last().next()
  poems: (id)    -> @openView 'Main', id
  calendar: (id) -> @openView 'Calendar'
  favorites:     -> @openView 'Favorites'
  about:         -> @openView 'About'
  developer:     -> @openView 'DeveloperMenu'

  openView: (viewName, args...) ->
    @currentView?.unmount?()
    @currentView = new AP["#{viewName}View"](args...)
    @currentView.slided = @slidePath?
    @currentView.render()

    @slidePath = null

    # unless @slidePath is @path
    #   @currentView.render()
    # else
    #   @slidePath = null
    #   app.f7router.loadContent @currentView.renderOffDocument()

    null

  start: ->
    Backbone.history.start()

  slide: (path...) ->
    path = path.join("/")
    @slidePath = path.replace(/^#/, '')
    @open path

#
# if @constructor.disabled
#   console.warn "router disabled"
#   return
#
# ... return if $(link).hasClass("external")
#
# $(document).on 'click', 'a.back.link', (e) =>
#   @go ''
#
