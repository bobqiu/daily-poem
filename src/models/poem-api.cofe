class AP.PoemApi
  constructor: ->
    @cache = new AP.DateCache
    @likes = new Set JSON.parse(localStorage.likes ? '[]')
    @date = MutableXDate.today()

  setDate: (date) ->
    @date = new MutableXDate(date)

  cachedCurrent: ->
    @cache.get @date

  getCurrent: (next) ->
    @getForDate @date, next

  hasDataFor: (date) ->
    @firstDate.lte date and date.lte @date.last()

  get: (id, next) ->
    console.xdebug "loading poem ##{id}"

    date = new MutableXDate @reverseMapping[id]

    if not id
      return next null

    if @cache.has date
      return next @cache.get date

    fetchJSON "poems/#{id}.json", (res) =>
      poem = new AP.Poem(res)
      @cache.set date, poem

      console.xdebug "loaded poem ##{id}"
      next poem

  getForDate: (date, next) ->
    id = @mapping[date.string()]
    @get id, next

  load: (next) ->
    fetchJSON "poems/summary.json", (res) =>
      @mapping = res.mapping
      @reverseMapping = _.invert(@mapping)
      @descriptors = res.items

      allDates = Object.keys(@mapping)

      @firstDate = new XDate allDates[0]
      @lastDate = new XDate allDates[allDates.length - 1]
      MutableXDate.first = @firstDate

      next()

  like: (poemId) ->
    if @likes.has(poemId) then @likes.delete(poemId) else @likes.add(poemId)
    localStorage.likes = JSON.stringify _.toArray @likes

  randomPoemId: ->
    currentDate = MutableXDate.today()
    currentPoemId = @cachedCurrent().id
    visibleIds = for date, id of @mapping
      break if date > currentDate
      id

    currentPoemIndex = visibleIds.indexOf currentPoemId
    randomIndex = Math.floor(Math.random() * visibleIds.length)
    if randomIndex == currentPoemIndex
      randomIndex += if randomIndex isnt 0 then -1 else +1

    randomId = visibleIds[randomIndex]
    randomId

  exists: (id) ->
    !!Model.reverseMapping[id]

  getFavorites: (next) ->
    poemIds = (id for id in _.toArray @likes)
    poemIds = poemIds.filter @exists

    return next() if poemIds.length is 0

    poems = []; count = 0
    for id in poemIds
      @get id, (poem) ->
        poems.push(poem)
        if ++count == poemIds.length
          next?(poems)

  closest: (limit = 5, next) ->
    count = 0
    # currentDateStr = @date.first().string() # TEMP
    currentDateStr = MutableXDate.today().string()
    ids = []
    for date, id of @mapping when date > currentDateStr
      ids.push id
      count += 1
      break if count == limit

    poems = []
    for id in ids
      @get id, (poem) =>
        poems.push poem
        if poems.length == ids.length
          next(poems)
