{floor, abs} = Math

logging = yes
log = (args...) -> console.log(args...) if logging
clear = -> console.clear() if logging

width = 100
defaultUnit = '%'
screenWidth = $(window).width()
transitionDuration = '400ms'
translate3d = (value, unit = defaultUnit) -> "translate3d(#{value}#{unit}, 0px, 0px)"

class AP.MainAnimator
  constructor: (@view) ->
    @container = $('.smm-swiper')
    @viewport = $('.smm-swiper-viewport')
    @done = yes
    @shift = 0

    @hammer = new Hammer $('#poem-swiper')[0], {}
    @hammer.get('pan').set direction: Hammer.DIRECTION_ALL
    @hammer.on 'tap', @tap
    @hammer.on 'pan', @pan

  unmount: ->
    @hammer.off 'tap'
    @hammer.off 'pan'

  adjust: (direction) ->
    log 'adjusting if needed'

    return unless Model.date.canMove(direction)
    return unless @done

    @done = no

    log 'adjusting'

    @shift = @shift - direction * width

    Model.date.move(direction)

    # @container.addClass "panning"
    @viewport.addClass "animating"
    @viewport.css transform: translate3d(@shift), "transition-duration": transitionDuration

    curr = @viewport.find('.smm-swiper-slide.current').show()
    prev = @viewport.find('.smm-swiper-slide.prev').show()
    next = @viewport.find('.smm-swiper-slide.next').show()

    finishAnimation = =>
      @done = yes
      @viewport.removeClass "animating"
      @container.removeClass "panning"
      # $('.smm-swiper-slide.prev', @viewport).hide()
      # $('.smm-swiper-slide.next', @viewport).hide()
      @viewport.find('.smm-swiper-slide:not(.current) .content-block').scrollTop(0)

    @viewport.one "transitionend", =>
      if direction is +1
        curr.toggleClass('current prev')
        next.toggleClass('next current')
        prev.toggleClass('prev next').css transform: translate3d(-@shift + width)
        @view.renderDate Model.date.next(), (html) =>
          prev.html html
          finishAnimation()
      else
        prev.toggleClass('prev current')
        curr.toggleClass('current next')
        next.toggleClass('next prev').css transform: translate3d(-@shift - width)
        @view.renderDate Model.date.prev(), (html) =>
          next.html html
          finishAnimation()

    true

  tap: (e) =>
    insideControlsBlock = $(e.target).closest(".poem-controls").length isnt 0
    log "tap #{Util.dumpBools controls:insideControlsBlock}"
    unless insideControlsBlock
      e.preventDefault()
      direction = if e.center.x > screenWidth / 2 then 1 else -1
      @adjust direction

  pan: (e) =>
    animateFullSlideOnly = no

    if !@panningStep? and !@scrollingStarted?
      clear()

    dx = e.deltaX
    dy = e.deltaY
    dxPc = dx / screenWidth * 100
    vxo = e.overallVelocityX

    log "pan dx=#{dx} / #{dxPc.toFixed(2)}% dy=#{dy} vx=#{vxo.toFixed(2)}
        #{Util.dumpBools first: e.isFirst, cont: @panningStep, final: e.isFinal, vertical: tooVerticalToStart}"

    if @scrollingStarted
      log "  scrolling"
      log "  scrolling ended"  if e.isFinal
      delete @scrollingStarted if e.isFinal
      return

    tooVerticalToStart = !@panningStep? and (abs(dy) > 20 or abs(dx) < 10)

    if tooVerticalToStart
      log "  scrolling started"
      @scrollingStarted = true
      return

    e.preventDefault()
    @panningStep ?= 0
    @panningStep += 1

    if animateFullSlideOnly

      if e.isFinal and abs(dxPc) >= 15
        delete @panningStep
        direction = if dx > 0 then -1 else +1
        @viewport.removeClass("swiping")
        @adjust direction

    else

      @dxStep ?= 0
      @dxStep = dx - @dxStep

      @viewport.addClass("swiping")

      unless e.isFinal
        dxPc = @panningStep * 1.0 * (if dx < 0 then -1 else 1)
        log "  moving step=#{@panningStep} #{dxPc}% / #{@dxStep}px"
        @viewport.css transform: translate3d(@shift + dxPc, '%'), 'transition-duration': '0ms'

      else
        delete @panningStep
        delete @dxStep

        direction = if e.deltaX > 0 then -1 else +1
        log "  final #{dx}px #{dxPc}% dir=#{direction} vel=#{vxo.toFixed(2)}"
        log ""

        if (abs(dxPc) >= 50 or abs(vxo) > 0.5) and Model.date.canMove(direction)
          @viewport.css "transition-duration": transitionDuration
          @adjust direction
        else
          @viewport.css "transition-duration": transitionDuration
          @viewport.css transform: translate3d(@shift, '%')

        @viewport.removeClass("swiping")
