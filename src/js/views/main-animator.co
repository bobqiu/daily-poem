{floor, abs} = Math

logging = no
log = (args...) -> console.log(args...) if logging; true
clear = -> console.clear() if logging; true

AnimateFullSlideOnly = no
Width = 100
defaultUnit = '%'
screenWidth = $(window).width()
transitionDuration = '400ms'
translate3d = (value, unit = defaultUnit) -> "translate3d(#{value}#{unit}, 0px, 0px)"

class AP.MainAnimator
  constructor: (@view) ->
    console.log 'created'
    @container = $('.smm-swiper')
    @viewport = $('.smm-swiper-viewport')
    @shift = 0
    @animating = false
    @nextLoaded = true
    @prevLoaded = true

    @viewport.on "transitionend", @movementAnimated

    @hammer = new Hammer $('#poem-swiper')[0], {}
    @hammer.get('pan').set direction: Hammer.DIRECTION_ALL
    @hammer.on 'tap', @tap
    @hammer.on 'pan', @pan

  unmount: ->
    @hammer.off 'tap'
    @hammer.off 'pan'

  move: (direction) ->
    return unless Model.date.canMove(direction)
    return log "stop moving as not done yet" if !@done()

    log 'moving'

    Model.date.move(direction)

    curr = @viewport.find('.smm-swiper-slide.current').show()
    prev = @viewport.find('.smm-swiper-slide.prev').show()
    next = @viewport.find('.smm-swiper-slide.next').show()

    @shift = @shift - direction * Width
    @animating = true
    @viewport.css transform: translate3d(@shift), 'transition-duration': transitionDuration
    @viewport.one "transitionend", (e) => @movementToSiblingAnimated(curr, prev, next, direction, e)

    true

  moveBack: ->
    log "moving back"
    @animating = true
    @viewport.css transform: translate3d(@shift, '%'), 'transition-duration': transitionDuration

  movementAnimated: (e) =>
    @animating = false

  movementToSiblingAnimated: (curr, prev, next, direction, e) =>
    if direction is +1
      curr.toggleClass('current prev')
      next.toggleClass('next current')
      prev.toggleClass('prev next').css transform: translate3d(-@shift + Width)
      @prevLoaded = false
      @view.renderDate Model.date.next(), (html) =>
        prev.html html
        @prevLoaded = true
        @resetNonCurrentScrolling()
    else
      prev.toggleClass('prev current')
      curr.toggleClass('current next')
      next.toggleClass('next prev').css transform: translate3d(-@shift - Width)
      @nextLoaded = false
      @view.renderDate Model.date.prev(), (html) =>
        next.html html
        @nextLoaded = true
        @resetNonCurrentScrolling()

  resetNonCurrentScrolling: =>
    @viewport.find('.smm-swiper-slide:not(.current) .content-block').scrollTop(0)

  tap: (e) =>
    return log "prevent tapping as not done yet" if !@done()
    insideControlsBlock = $(e.target).closest(".poem-controls").length isnt 0
    log "tap #{Util.dumpBools controls:insideControlsBlock}"
    unless insideControlsBlock
      e.preventDefault()
      direction = if e.center.x > screenWidth / 2 then 1 else -1
      @move direction

  pan: (e) =>
    return log "prevent panning as not done yet" if !@done()

    # if !@panningStep? and !@scrollingStarted?
    #   clear()

    dx = e.deltaX
    dy = e.deltaY
    dxPc = dx / screenWidth * 100
    vxo = e.overallVelocityX

    log "pan dx=#{dx} / #{dxPc.toFixed(2)}% dy=#{dy} vx=#{vxo.toFixed(2)}
        #{Util.dumpBools first: e.isFirst, cont: @panningStep, final: e.isFinal, vertical: tooVerticalToStart}"

    if @scrollingStarted
      log "  scrolling"
      log "  scrolling ended"  if e.isFinal
      delete @scrollingStarted if e.isFinal
      return

    tooVerticalToStart = !@panningStep? and (abs(dy) > 20 or abs(dx) < 10)

    if tooVerticalToStart
      log "  scrolling started"
      @scrollingStarted = true
      return

    @doPanning(e, dx, dy, dxPc, vxo)

  doPanning: (e, dx, dy, dxPc, vxo) ->
    e.preventDefault()

    @panningStep ?= 0
    @panningStep += 1

    if AnimateFullSlideOnly

      if e.isFinal and abs(dxPc) >= 15
        delete @panningStep
        direction = if dx > 0 then -1 else +1
        @move direction

    else

      @dxStep ?= 0
      @dxStep = dx - @dxStep

      unless e.isFinal
        dxPc = @panningStep * 1.0 * (if dx < 0 then -1 else 1)
        log "  moving step=#{@panningStep} #{dxPc}% / #{@dxStep}px"
        @viewport.css transform: translate3d(@shift + dxPc, '%'), 'transition-duration': '0ms'

      else
        delete @panningStep
        delete @dxStep

        direction = if dx > 0 then -1 else +1
        log "  final #{dx}px #{dxPc}% dir=#{direction} vel=#{vxo.toFixed(2)}"
        log ""

        if (abs(dxPc) >= 50 or abs(vxo) > 0.5) and Model.date.canMove(direction)
          @move direction
        else
          @moveBack()

  done: ->
    !@animating and @nextLoaded and @prevLoaded
